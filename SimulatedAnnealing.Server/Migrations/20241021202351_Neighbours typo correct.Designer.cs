// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimulatedAnnealing.Server.Services.Database;

#nullable disable

namespace SimulatedAnnealing.Server.Migrations
{
    [DbContext(typeof(PhdApiContext))]
    [Migration("20241021202351_Neighbours typo correct")]
    partial class Neighbourstypocorrect
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.County", b =>
                {
                    b.Property<int>("CountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountyId"));

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("Inahabitants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CountyId")
                        .HasName("PK__Counties__B68F9D973EADF06B");

                    b.HasIndex("DistrictId");

                    b.ToTable("Counties", "LocalGovernment");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int?>("VoivodeshipsId")
                        .HasColumnType("int");

                    b.HasKey("DistrictId")
                        .HasName("PK__District__85FDA4C6BF4952B8");

                    b.HasIndex("VoivodeshipsId");

                    b.ToTable("Districts", "LocalGovernment");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.GerrymanderingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChoosenParty")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CrackingThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<double>("CrackingWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ElectoralYear")
                        .HasColumnType("int");

                    b.Property<double>("FinalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<double>("FinalSeats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<double>("InitialScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<double>("InitialSeats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<int>("Iterations")
                        .HasColumnType("int");

                    b.Property<double>("PackingThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<double>("PackingWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<string>("Results")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<double>("ScoreChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<double>("SeatsChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0.0000000000000000e+000))");

                    b.Property<string>("Voivodeship")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id")
                        .HasName("PK__Gerryman__3214EC07D3AD156B");

                    b.ToTable("GerrymanderingResults");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.Neighbor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<int?>("NeighborId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Neighbou__3213E83FF0EB9AB4");

                    b.HasIndex("CountyId");

                    b.ToTable("Neighbors");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.Voivodeship", b =>
                {
                    b.Property<int>("VoivodeshipsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoivodeshipsId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VoivodeshipsId")
                        .HasName("PK__Voivodsh__C28D1B0244656C55");

                    b.ToTable("Voivodeships");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.VotingResult", b =>
                {
                    b.Property<int>("ResultsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultsId"));

                    b.Property<string>("Committee")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberVotes")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ResultsId")
                        .HasName("PK__Wyniki__CD0BFEE20D209865");

                    b.HasIndex("CountyId");

                    b.ToTable("VotingResults", "LocalGovernment");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.County", b =>
                {
                    b.HasOne("SimulatedAnnealing.Server.Models.Fixed.District", "District")
                        .WithMany("Counties")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK__Counties__Distri__5070F446");

                    b.Navigation("District");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.District", b =>
                {
                    b.HasOne("SimulatedAnnealing.Server.Models.Fixed.Voivodeship", "Voivodeships")
                        .WithMany("Districts")
                        .HasForeignKey("VoivodeshipsId")
                        .HasConstraintName("FK__Districts__Voivo__4F7CD00D");

                    b.Navigation("Voivodeships");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.Neighbor", b =>
                {
                    b.HasOne("SimulatedAnnealing.Server.Models.Fixed.County", "County")
                        .WithMany("Neighbors")
                        .HasForeignKey("CountyId")
                        .HasConstraintName("FK_Sasiedzi_PowiatID");

                    b.Navigation("County");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.VotingResult", b =>
                {
                    b.HasOne("SimulatedAnnealing.Server.Models.Fixed.County", "County")
                        .WithMany("VotingResults")
                        .HasForeignKey("CountyId")
                        .HasConstraintName("FK__Wyniki__PowiatID__48CFD27E");

                    b.Navigation("County");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.County", b =>
                {
                    b.Navigation("Neighbors");

                    b.Navigation("VotingResults");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.District", b =>
                {
                    b.Navigation("Counties");
                });

            modelBuilder.Entity("SimulatedAnnealing.Server.Models.Fixed.Voivodeship", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
